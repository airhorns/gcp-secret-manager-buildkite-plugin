#!/bin/bash

set -euox pipefail

echo "--- :googlecloud::key: Reading secrets from GCP Secret Manager"

initialized=""

function initialize() {
  if [[ "${initialized}" -eq "1" ]]; then
    return
  fi

  local result;
  local path;

  path=$(which gcloud)
  result=$?
  if [[ $result -ne 0 ]]; then
    echo "gcloud binary is not available in \$PATH"
    exit 1
  fi

  # shellcheck disable=SC2034
  path=$(which jq)
  result=$?
  if [[ $result -ne 0 ]]; then
    echo "jq binary is not available in \$PATH"
    exit 1
  fi

  if [ -v BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_CREDENTIALS_FILE ]; then
    gcloud auth activate-service-account --key-file "${BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_CREDENTIALS_FILE}"
  fi
  
  # Ensure the GCP project is set
  if [ -z "${BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_PROJECT_ID}" ]; then
    echo "GCP Project ID (BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_PROJECT_ID) is not set."
    exit 1
  fi

  initialized="1"
}

function load_secret_into_env() {
  local export_name="$1"
  local secret_info="$2"
  local secret_name
  local secret_version

  secret_name="${secret_info%:*}"
  secret_version="${secret_info#*:}"
  if [[ "$secret_name" == "$secret_version" ]]; then
    secret_version=""
  fi

  local secret_value
  secret_value="$(get_secret_value "${secret_name}" "${secret_version}")"

  echo "Exporting secret ${secret_name} from GCP Secret Manager into environment variable ${export_name}"

  export "${export_name}=${secret_value}"
}

function get_secret_value() {
  local secret_name="$1"
  local secret_version="${2:-}"  # default to empty
  local secret_value

  if [[ -z "$secret_version" ]]; then
    secret_version=$(gcloud secrets versions list "${secret_name}" --project="${BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_PROJECT_ID}" --format=json | jq -r '.[0].name')
    secret_version="${secret_version##*/}"
  fi

  secret_value=$(gcloud secrets versions access "${secret_version}" \
    --project="${BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_PROJECT_ID}" \
    --secret="${secret_name}" \
    --format='get(payload.data)' | tr '_-' '/+' | base64 -d)

  echo "${secret_value}"
}

function strip_quotes() {
  echo "${1}" | sed "s/^[[:blank:]]*//g;s/[[:blank:]]*$//g;s/[\"']//g"
}

# Parse env items
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_ENV_) ]] ; then
    initialize

    export export_name
    export_name="${name//BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_ENV_/}"
    export secret_info
    secret_info="$(strip_quotes "${!name}")"

    load_secret_into_env "${export_name}" "${secret_info}"
  fi
done < <(env | sort)
